Мне нужно, чтобы мой сайт/PWA всегда автоматически обновлялся у клиентов после деплоя, без того, чтобы пользователь очищал кэш или нажимал «обновить».

Сейчас проблема в том, что после внесения изменений на сервере:

у одних пользователей загружается новая версия,

а у других остаётся старая, пока они вручную не очистят кэш.


Что я хочу:

1. При каждом новом деплое должна автоматически устанавливаться новая версия сервис-воркера.


2. Старые кэши должны удаляться сами.


3. Сервис-воркер должен использовать skipWaiting() и clients.claim(), чтобы новая версия сразу активировалась и брала управление над всеми вкладками.


4. Версия кэша должна меняться автоматически (например, через timestamp или hash при каждой сборке). Это гарантирует, что браузер скачает новые файлы и не будет использовать старый кэш.


5. Для клиента всё должно быть прозрачно: он просто заходит на сайт и всегда видит актуальную версию.



Пример реализации:

// service-worker.js

const CACHE_NAME = "my-app-" + new Date().getTime(); 

const FILES_TO_CACHE = [
  "/",
  "/index.html",
  "/styles.css",
  "/app.js",
  "/icon.png",
];

// Устанавливаем и кэшируем
self.addEventListener("install", (event) => {
  self.skipWaiting();
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(FILES_TO_CACHE);
    })
  );
});

// Активация — чистим старый кэш
self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((name) => {
          if (name !== CACHE_NAME) {
            return caches.delete(name);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// Обработка запросов
self.addEventListener("fetch", (event) => {
  event.respondWith(
    fetch(event.request).catch(() => caches.match(event.request))
  );
});

Итог: после любого деплоя клиент автоматически получает последнюю версию, а старая больше никогда не используется.