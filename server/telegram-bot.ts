import { Telegraf } from 'telegraf';
import { storage } from './storage';
import { generateVerificationCode } from './auth';

// Bot token from environment
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!BOT_TOKEN) {
  console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// Create bot instance
const bot = new Telegraf(BOT_TOKEN || 'dummy-token');

// Store user sessions (in production, use Redis or database)
const userSessions = new Map<number, any>();

// Bot commands and handlers
bot.start(async (ctx: any) => {
  const welcomeMessage = `üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–£–ß–ê–†–•–ê!

–Ø –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç.

üîê –î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –î–£–ß–ê–†–•–ê –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.

–ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/phone - –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å`;

  await ctx.reply(welcomeMessage);
});

bot.help(async (ctx: any) => {
  const helpMessage = `üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/phone - –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞  
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîê –ö–æ–¥—ã –≤—Ö–æ–¥–∞:
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –î–£–ß–ê–†–•–ê.

‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_ducharha`;

  await ctx.reply(helpMessage);
});

// Phone number registration
bot.command('phone', async (ctx: any) => {
  userSessions.set(ctx.from!.id, { awaitingPhone: true });
  
  await ctx.reply(`üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +992XXXXXXXXX

–ù–∞–ø—Ä–∏–º–µ—Ä: +992901234567

–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –î–£–ß–ê–†–•–ê.`);
});

// Status command
bot.command('status', async (ctx: any) => {
  const userId = ctx.from!.id;
  const session = userSessions.get(userId);
  
  if (session?.phone) {
    await ctx.reply(`‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω
üì± –ù–æ–º–µ—Ä: ${session.phone}
üîê –ì–æ—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –≤—Ö–æ–¥–∞`);
  } else {
    await ctx.reply(`‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /phone –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞`);
  }
});

// Handle text messages
bot.on('text', async (ctx: any) => {
  const userId = ctx.from!.id;
  const session = userSessions.get(userId);
  const text = ctx.message.text;
  
  // If user is registering phone number
  if (session?.awaitingPhone) {
    const phoneRegex = /^\+992\d{9}$/;
    
    if (phoneRegex.test(text)) {
      // Save phone number
      userSessions.set(userId, { 
        phone: text,
        telegramId: userId,
        username: ctx.from!.username,
        firstName: ctx.from!.first_name,
        lastName: ctx.from!.last_name
      });
      
      await ctx.reply(`‚úÖ –ù–æ–º–µ—Ä ${text} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!
üîê –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –≤—Ö–æ–¥–∞ –æ—Ç –±–æ—Ç–∞.`);
    } else {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!
üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +992XXXXXXXXX
–ù–∞–ø—Ä–∏–º–µ—Ä: +992901234567`);
    }
    return;
  }
  
  // Default response for unrecognized messages
  await ctx.reply(`ü§ñ –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`);
});

// Function to send verification code (used by API)
export async function sendCodeToTelegram(phone: string, code: string): Promise<boolean> {
  try {
    // Find user by phone number
    let targetUserId: number | null = null;
    
    for (const [userId, session] of Array.from(userSessions.entries())) {
      if (session.phone === phone) {
        targetUserId = userId;
        break;
      }
    }
    
    if (!targetUserId) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º ${phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram –±–æ—Ç–µ`);
      return false;
    }
    
    const message = `üîê <b>–ö–æ–¥ –≤—Ö–æ–¥–∞ –≤ –î–£–ß–ê–†–•–ê</b>

<code>${code}</code>

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç
üîí –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–º—É!`;
    
    await bot.telegram.sendMessage(targetUserId, message, { 
      parse_mode: 'HTML' 
    });
    
    console.log(`‚úÖ –ö–æ–¥ ${code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${phone}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return false;
  }
}

// Function to get user's Telegram info by phone
export async function getTelegramUserByPhone(phone: string): Promise<any | null> {
  for (const [userId, session] of Array.from(userSessions.entries())) {
    if (session.phone === phone) {
      return {
        telegramId: userId,
        phone: session.phone,
        username: session.username,
        firstName: session.firstName,
        lastName: session.lastName
      };
    }
  }
  return null;
}

// Function to notify user about order updates
export async function notifyOrderUpdate(phone: string, orderId: string, status: string): Promise<boolean> {
  try {
    let targetUserId: number | null = null;
    
    for (const [userId, session] of Array.from(userSessions.entries())) {
      if (session.phone === phone) {
        targetUserId = userId;
        break;
      }
    }
    
    if (!targetUserId) {
      return false;
    }
    
    let statusText = '';
    let emoji = '';
    
    switch (status) {
      case 'confirmed':
        statusText = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
        emoji = '‚úÖ';
        break;
      case 'preparing':
        statusText = '–≥–æ—Ç–æ–≤–∏—Ç—Å—è';
        emoji = 'üë®‚Äçüç≥';
        break;
      case 'delivering':
        statusText = '–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è';
        emoji = 'üöó';
        break;
      case 'delivered':
        statusText = '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω';
        emoji = 'üéâ';
        break;
      case 'cancelled':
        statusText = '–æ—Ç–º–µ–Ω–µ–Ω';
        emoji = '‚ùå';
        break;
      default:
        statusText = status;
        emoji = 'üì¶';
    }
    
    const message = `${emoji} <b>–ó–∞–∫–∞–∑ #${orderId}</b>

–°—Ç–∞—Ç—É—Å: <b>${statusText}</b>

üõí –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ –î–£–ß–ê–†–•–ê!`;
    
    await bot.telegram.sendMessage(targetUserId, message, { 
      parse_mode: 'HTML' 
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ:', error);
    return false;
  }
}

// Error handling
bot.catch((err: any, ctx: any) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ:', err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// Start bot function
export async function startTelegramBot() {
  if (!BOT_TOKEN) {
    console.log('ü§ñ Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω');
    return;
  }
  
  try {
    await bot.launch();
    console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // Graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', error);
  }
}

export { bot };