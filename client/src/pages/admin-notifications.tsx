import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { ArrowLeft, Send, Bell, Users, MessageSquare, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { getCurrentUserId } from "@/utils/user-session";

export default function AdminNotifications() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  
  const [notificationData, setNotificationData] = useState({
    userId: getCurrentUserId(),
    title: "",
    message: "",
    type: "info"
  });

  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const adminToken = localStorage.getItem("adminToken");
    if (!adminToken) {
      setLocation("/admin/login");
      return;
    }
  }, [setLocation]);

  const notificationTypes = [
    { value: "info", label: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", color: "bg-blue-100 text-blue-800", icon: "‚ÑπÔ∏è" },
    { value: "success", label: "–£—Å–ø–µ—Ö", color: "bg-green-100 text-green-800", icon: "‚úÖ" },
    { value: "warning", label: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", color: "bg-yellow-100 text-yellow-800", icon: "‚ö†Ô∏è" },
    { value: "error", label: "–û—à–∏–±–∫–∞", color: "bg-red-100 text-red-800", icon: "‚ùå" },
    { value: "promotion", label: "–ê–∫—Ü–∏—è", color: "bg-purple-100 text-purple-800", icon: "üéâ" }
  ];

  const sendNotification = async () => {
    if (!notificationData.title.trim() || !notificationData.message.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    try {
      await apiRequest('POST', '/api/notifications', notificationData);
      
      // Invalidate notification queries to refresh the UI
      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });
      
      toast({
        title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
      });
      
      // Reset form
      setNotificationData({
        userId: getCurrentUserId(),
        title: "",
        message: "",
        type: "info"
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const sendPromoNotification = async (type: 'discount' | 'newProducts' | 'weekendSale') => {
    const promoMessages = {
      discount: {
        title: "üéâ –ù–æ–≤–∞—è –∞–∫—Ü–∏—è - —Å–∫–∏–¥–∫–∞ 25%!",
        message: "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∞ 25% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –°–ö–ò–î–ö–ê25 –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å, –∞–∫—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞!",
        type: "promotion"
      },
      newProducts: {
        title: "üÜï –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!",
        message: "–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥! –û–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –°–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
        type: "info"
      },
      weekendSale: {
        title: "üõí –í—ã—Ö–æ–¥–Ω—ã–µ —Å–æ —Å–∫–∏–¥–∫–æ–π!",
        message: "–í–µ—Å—å —É–∏–∫–µ–Ω–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ –∑–∞–∫–∞–∑—ã –æ—Ç 1000‚ÇΩ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –í–´–•–û–î–ù–´–ï15. –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
        type: "promotion"
      }
    };

    setNotificationData({
      userId: getCurrentUserId(),
      ...promoMessages[type]
    });
  };

  const currentType = notificationTypes.find(type => type.value === notificationData.type);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-40">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center h-16">
            <Button
              variant="ghost"
              onClick={() => setLocation("/admin")}
              className="mr-3 p-2 -ml-2"
              data-testid="button-back"
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-r from-green-500 to-green-600 p-2 rounded-lg">
                <Bell className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">
                  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                </h1>
                <p className="text-sm text-gray-500">
                  –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                </p>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Quick Actions */}
        <div className="mb-8">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">–ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card 
              className="cursor-pointer hover:shadow-md transition-shadow border-l-4 border-l-purple-500"
              onClick={() => sendPromoNotification('discount')}
              data-testid="card-discount-promo"
            >
              <CardContent className="p-4">
                <div className="flex items-center space-x-3">
                  <div className="text-2xl">üéâ</div>
                  <div>
                    <h3 className="font-medium text-gray-900">–ê–∫—Ü–∏—è —Å–æ —Å–∫–∏–¥–∫–æ–π</h3>
                    <p className="text-sm text-gray-500">–°–∫–∏–¥–∫–∞ 25% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card 
              className="cursor-pointer hover:shadow-md transition-shadow border-l-4 border-l-blue-500"
              onClick={() => sendPromoNotification('newProducts')}
              data-testid="card-new-products"
            >
              <CardContent className="p-4">
                <div className="flex items-center space-x-3">
                  <div className="text-2xl">üÜï</div>
                  <div>
                    <h3 className="font-medium text-gray-900">–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã</h3>
                    <p className="text-sm text-gray-500">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card 
              className="cursor-pointer hover:shadow-md transition-shadow border-l-4 border-l-orange-500"
              onClick={() => sendPromoNotification('weekendSale')}
              data-testid="card-weekend-sale"
            >
              <CardContent className="p-4">
                <div className="flex items-center space-x-3">
                  <div className="text-2xl">üõí</div>
                  <div>
                    <h3 className="font-medium text-gray-900">–í—ã—Ö–æ–¥–Ω–∞—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞</h3>
                    <p className="text-sm text-gray-500">–°–∫–∏–¥–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Main Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <MessageSquare className="w-5 h-5 text-blue-500" />
              <span>–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Type Selection */}
            <div className="space-y-2">
              <Label>–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
              <Select
                value={notificationData.type}
                onValueChange={(value) => setNotificationData(prev => ({ ...prev, type: value }))}
              >
                <SelectTrigger data-testid="select-notification-type">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {notificationTypes.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      <div className="flex items-center space-x-2">
                        <span>{type.icon}</span>
                        <span>{type.label}</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Title */}
            <div className="space-y-2">
              <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
              <Input
                id="title"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                value={notificationData.title}
                onChange={(e) => setNotificationData(prev => ({ ...prev, title: e.target.value }))}
                data-testid="input-notification-title"
              />
            </div>

            {/* Message */}
            <div className="space-y-2">
              <Label htmlFor="message">–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</Label>
              <Textarea
                id="message"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                value={notificationData.message}
                onChange={(e) => setNotificationData(prev => ({ ...prev, message: e.target.value }))}
                rows={4}
                data-testid="textarea-notification-message"
              />
            </div>

            {/* Preview */}
            {notificationData.title && (
              <div className="space-y-2">
                <Label>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</Label>
                <div className="border rounded-lg p-4 bg-gray-50">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0 mt-1">
                      <div className={`p-2 rounded-lg ${currentType?.color || 'bg-blue-100'}`}>
                        <Bell className="w-4 h-4" />
                      </div>
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-1">
                        <h3 className="font-medium text-gray-900">{notificationData.title}</h3>
                        <Badge variant="outline">{currentType?.label}</Badge>
                      </div>
                      {notificationData.message && (
                        <p className="text-gray-600 text-sm">{notificationData.message}</p>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Send Button */}
            <div className="flex items-center justify-between pt-4 border-t">
              <div className="flex items-center space-x-2 text-sm text-gray-500">
                <Users className="w-4 h-4" />
                <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</span>
              </div>
              <Button
                onClick={sendNotification}
                disabled={isLoading || !notificationData.title.trim() || !notificationData.message.trim()}
                className="bg-green-500 hover:bg-green-600 text-white"
                data-testid="button-send-notification"
              >
                {isLoading ? (
                  "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..."
                ) : (
                  <>
                    <Send className="w-4 h-4 mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Info Card */}
        <Card className="mt-6 border-l-4 border-l-blue-500 bg-blue-50">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <AlertCircle className="w-5 h-5 text-blue-500 mt-0.5" />
              <div>
                <h3 className="font-medium text-blue-900 mb-1">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</h3>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</li>
                  <li>‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–≤–æ–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</li>
                  <li>‚Ä¢ –ü—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª—è—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–∫–∞–º–∏</li>
                  <li>‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}