import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";
import { statusBarManager } from "./utils/status-bar-manager";
import { PWADetector } from "./utils/pwa-detection";
import { initializeGlobalErrorHandler } from "./utils/global-error-handler";

// Security: Disable console logs in production to prevent data leaks
if (import.meta.env.PROD) {
  console.log = () => {};
  console.info = () => {};
  console.debug = () => {};
  // console.error and console.warn are kept for debugging critical issues
}

// Initialize global error handler for catching unhandled errors
initializeGlobalErrorHandler();

// Initialize IndexedDB lazily to improve initial load time
if (typeof window !== 'undefined') {
  import("./lib/indexeddb").then(({ indexedDBService }) => {
    indexedDBService.init().catch(console.error);
  });
}

// –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—ç—à–µ–π (–≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function cleanupOldCaches() {
  try {
    const APP_CACHE_VERSION = 'v2';
    const APP_CACHE_PREFIX = 'ducharkha-';
    
    // 1. –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –Ω–∞—à–∏—Ö –∫—ç—à–µ–π
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞—à–∏—Ö –∫—ç—à–µ–π, –Ω–µ –≤—Å–µ –∫—ç—à–∏
      const oldCaches = cacheNames.filter(name => 
        name.startsWith(APP_CACHE_PREFIX) && 
        !name.includes(APP_CACHE_VERSION)
      );
      
      if (oldCaches.length > 0) {
        await Promise.all(oldCaches.map(name => caches.delete(name)));
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${oldCaches.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—ç—à–µ–π`);
      } else {
        console.log('‚úÖ –ù–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—ç—à–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
      }
    }

    // 2. –í dev —Ä–µ–∂–∏–º–µ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º SW –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (import.meta.env.DEV && 'serviceWorker' in navigator) {
      const registrations = await navigator.serviceWorker.getRegistrations();
      await Promise.all(registrations.map(reg => reg.unregister()));
      console.log('üßπ Dev: Service Workers –æ—Ç–ø–∏—Å–∞–Ω—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}

// –í development —Ä–µ–∂–∏–º–µ - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ PWA –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (import.meta.env.DEV) {
  console.log('üöß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: PWA –æ—Ç–∫–ª—é—á–µ–Ω');
  cleanupOldCaches();
} else {
  // –í production - —É–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è PWA
  console.log('üöÄ Production —Ä–µ–∂–∏–º: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PWA');
  PWADetector.debugPWAStatus();
  cleanupOldCaches().then(() => {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π service worker —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js', {
          updateViaCache: 'none', // –ù–µ –∫—ç—à–∏—Ä—É–µ–º —Å–∞–º service worker
        })
        .then((registration) => {
          console.log('‚úÖ –ù–æ–≤—ã–π Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å—Ä–∞–∑—É
                  newWorker.postMessage({ type: 'SKIP_WAITING' });
                }
              });
            }
          });

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
          navigator.serviceWorker.addEventListener('controllerchange', () => {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            window.location.reload();
          });
        })
        .catch((error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SW:', error);
        });
      });
    }
  });
}

// –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç status bar - —É–±–∏—Ä–∞–µ–º –º–∏–≥–∞–Ω–∏–µ
try {
  statusBarManager.setPurple();
} catch (error) {
  console.warn('Error setting initial status bar color:', error);
}

createRoot(document.getElementById("root")!).render(<App />);