import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

// Initialize IndexedDB lazily to improve initial load time
if (typeof window !== 'undefined') {
  import("./lib/indexeddb").then(({ indexedDBService }) => {
    indexedDBService.init().catch(console.error);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π –∏ service worker'–æ–≤
async function cleanupOldCaches() {
  try {
    // 1. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      await Promise.all(cacheNames.map(name => caches.delete(name)));
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    // 2. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö service worker'–æ–≤
    if ('serviceWorker' in navigator) {
      const registrations = await navigator.serviceWorker.getRegistrations();
      await Promise.all(registrations.map(reg => reg.unregister()));
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ service worker\s —É–¥–∞–ª–µ–Ω—ã');
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}

// –í development —Ä–µ–∂–∏–º–µ - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ PWA
if (process.env.NODE_ENV === 'development') {
  console.log('üöß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: PWA –æ—Ç–∫–ª—é—á–µ–Ω');
  cleanupOldCaches();
} else {
  // –í production - —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ, –ø–æ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ
  console.log('üöÄ Production —Ä–µ–∂–∏–º: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PWA');
  cleanupOldCaches().then(() => {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π service worker —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js', {
          updateViaCache: 'none', // –ù–µ –∫—ç—à–∏—Ä—É–µ–º —Å–∞–º service worker
        })
        .then((registration) => {
          console.log('‚úÖ –ù–æ–≤—ã–π Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å—Ä–∞–∑—É
                  newWorker.postMessage({ type: 'SKIP_WAITING' });
                }
              });
            }
          });

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
          navigator.serviceWorker.addEventListener('controllerchange', () => {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            window.location.reload();
          });
        })
        .catch((error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SW:', error);
        });
      });
    }
  });
}

createRoot(document.getElementById("root")!).render(<App />);