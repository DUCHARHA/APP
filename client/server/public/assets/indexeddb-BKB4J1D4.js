class i{constructor(){this.dbName="ducharha_pwa",this.version=1,this.db=null}async init(){return new Promise((s,o)=>{const t=indexedDB.open(this.dbName,this.version);t.onerror=()=>o(t.error),t.onsuccess=()=>{this.db=t.result,s()},t.onupgradeneeded=e=>{const r=e.target.result;if(r.objectStoreNames.contains("profile")||r.createObjectStore("profile",{keyPath:"id"}),!r.objectStoreNames.contains("orders")){const n=r.createObjectStore("orders",{keyPath:"id"});n.createIndex("status","status",{unique:!1}),n.createIndex("createdAt","createdAt",{unique:!1})}r.objectStoreNames.contains("cart")||r.createObjectStore("cart",{keyPath:"productId"}),r.objectStoreNames.contains("addresses")||r.createObjectStore("addresses",{keyPath:"id"}),r.objectStoreNames.contains("paymentMethods")||r.createObjectStore("paymentMethods",{keyPath:"id"})}})}async getStore(s,o="readonly"){return this.db||await this.init(),this.db.transaction([s],o).objectStore(s)}async saveProfile(s){const o=await this.getStore("profile","readwrite");return new Promise((t,e)=>{const r=o.put(s);r.onsuccess=()=>t(),r.onerror=()=>e(r.error)})}async getProfile(){const s=await this.getStore("profile");return new Promise((o,t)=>{const e=s.get("user");e.onsuccess=()=>o(e.result||null),e.onerror=()=>t(e.error)})}async addToCart(s){const o=await this.getStore("cart","readwrite");return new Promise((t,e)=>{const r=o.get(s.productId);r.onsuccess=()=>{const n=r.result;if(n){n.quantity+=s.quantity;const a=o.put(n);a.onsuccess=()=>t(),a.onerror=()=>e(a.error)}else{const a=o.add(s);a.onsuccess=()=>t(),a.onerror=()=>e(a.error)}},r.onerror=()=>e(r.error)})}async getCart(){const s=await this.getStore("cart");return new Promise((o,t)=>{const e=s.getAll();e.onsuccess=()=>o(e.result),e.onerror=()=>t(e.error)})}async updateCartItem(s,o){const t=await this.getStore("cart","readwrite");return new Promise((e,r)=>{if(o<=0){const n=t.delete(s);n.onsuccess=()=>e(),n.onerror=()=>r(n.error)}else{const n=t.get(s);n.onsuccess=()=>{const a=n.result;if(a){a.quantity=o;const c=t.put(a);c.onsuccess=()=>e(),c.onerror=()=>r(c.error)}else e()},n.onerror=()=>r(n.error)}})}async clearCart(){const s=await this.getStore("cart","readwrite");return new Promise((o,t)=>{const e=s.clear();e.onsuccess=()=>o(),e.onerror=()=>t(e.error)})}async saveOrder(s){const o=await this.getStore("orders","readwrite");return new Promise((t,e)=>{const r=o.put(s);r.onsuccess=()=>t(),r.onerror=()=>e(r.error)})}async getOrders(){const s=await this.getStore("orders");return new Promise((o,t)=>{const e=s.getAll();e.onsuccess=()=>{const r=e.result.sort((n,a)=>new Date(a.createdAt).getTime()-new Date(n.createdAt).getTime());o(r)},e.onerror=()=>t(e.error)})}async getOrder(s){const o=await this.getStore("orders");return new Promise((t,e)=>{const r=o.get(s);r.onsuccess=()=>t(r.result||null),r.onerror=()=>e(r.error)})}async saveAddress(s){const o=await this.getStore("addresses","readwrite");return new Promise((t,e)=>{const r=o.put(s);r.onsuccess=()=>t(),r.onerror=()=>e(r.error)})}async getAddresses(){const s=await this.getStore("addresses");return new Promise((o,t)=>{const e=s.getAll();e.onsuccess=()=>o(e.result),e.onerror=()=>t(e.error)})}async deleteAddress(s){const o=await this.getStore("addresses","readwrite");return new Promise((t,e)=>{const r=o.delete(s);r.onsuccess=()=>t(),r.onerror=()=>e(r.error)})}async savePaymentMethod(s){const o=await this.getStore("paymentMethods","readwrite");return new Promise((t,e)=>{const r=o.put(s);r.onsuccess=()=>t(),r.onerror=()=>e(r.error)})}async getPaymentMethods(){const s=await this.getStore("paymentMethods");return new Promise((o,t)=>{const e=s.getAll();e.onsuccess=()=>o(e.result),e.onerror=()=>t(e.error)})}async deletePaymentMethod(s){const o=await this.getStore("paymentMethods","readwrite");return new Promise((t,e)=>{const r=o.delete(s);r.onsuccess=()=>t(),r.onerror=()=>e(r.error)})}}const d=new i;export{d as indexedDBService};
